#ifndef SRC_3D_VIEWER_V1_0_H
#define SRC_3D_VIEWER_V1_0_H

/*! \mainpage
 *
 * Part 1. 3DViewer - визуализация каркасной модели в трёхмерном пространстве.
 *
 * Part 2. Bonus. Settings - настройка типа проекции, типа, цвета и толщины
 * рёбер, цвета и размера вершин, а также цвета фона.
 *
 * Part 3. Bonus. Record - сохранение изображения в *.bmp или *.jpeg файл,
 * запись небольших "скринкастов" в формате *.gif-анимации
 *
 * Приложение 3DViewer v1.0 предназначено для визуализации каркасной модели в
 * трехмерном пространстве. 3D модель загружается из "OBJ" файла. Программа
 * загружает информацию о вершинах и полигонах, игнорируя другие данные. Такие
 * параметры программы, как тип проекции, цвет фона модели, параметры рисования
 * вершин и ребер сохраняются при закрытии программы и восстанавливаются при
 * следующем запуске.
 *
 * Окно приложения разделено на две части. Слева находятся органы управления,
 * справа окно визуализации.
 *
 * - Кнопка "Open File" служит для загрузки файла. Ниже
 * этой кнопки выводится имя файла.
 * - "Zoom" - слайдер и поле ввода служат для масштабирования модели.
 * - "Projection" - можно выбрать тип проекции - параллельная или центральная.
 * - "Rotate" - слайдеры и поля ввода служат для поворота модели по трем осям.
 * - "Move" - слайдеры и поля ввода служат для перемещения модели по трем осям.
 * - "Edges" - можно выбрать цвет и толшину ребер, а также тип их прорисовки:
 * сплошной или пунктирный.
 * - "Nodes" - можно выбрать цвет и размер вершин, а также тип их прорисовки:
 * не рисовать, квадратики или кружочки.
 * - Кнопка "Choose BG Color" служит для выбора цвета фона модели.
 * - Кнопка "Reset" сбрасывает параметры "Zoom", "Rotate" и "Move" по
 * умолчанию и заново загружает модель.
 * - Кнопка "Screenshot" позволяет делать скриншот окна визуализации и сохранять
 * его в файле "JPG" или "BMP".
 * - Кнопка "Screencast" позволяет сохранять в файл gif-анимацию окна
 * визуализации длительностью 5 секунд.
 *
 * Внизу выводится информация по модели: количество вершин и ребер.
 * Также выводится статус загрузки: "OK" или "Error".
 */

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/// Точность для тестов
#define EPS 1e-6

/// Константа ПИ для тригонометрических вычислений (поворот)
#define M_PI 3.14159265358979323846

/// Минимально возможное количество вершин у модели
#define MIN_VERTICES 3

/// Максимальная длина строки в obj-файле
#define BUFF_SIZE 1024

/// Код ошибки для read_obj_file(). Данные прочитаны успешно
#define OK 0
/// Код ошибки для read_obj_file(). Ошибка открытия файла
#define ERROR_FILE_OPEN 1
/// Код ошибки для read_obj_file(). Некорректное содержимое файла
#define ERROR_FILE_STRUCT 2
/// Код ошибки для read_obj_file(). Ошибка доступа к памяти
#define ERROR_MEMORY 3

/// Структура для полигона
typedef struct Polygon {
  int num_vertices;  ///< Количество вершин в полигоне
  int *vertices_on_polygon;  ///< Массив номеров вершин
} Polygon;

/// Структура для данных модели (вершины и полигоны)
typedef struct Obj_data {
  int num_V;  ///< Количество всех вершин в модели
  int num_F;  ///< Количество всех граней (полигонов)
  double *V;  ///< Массив с координатами вершин
  Polygon *F;  ///< Массив структур с вершинами полигонов
  double V_min[3];  ///< Координаты минимальной вершины
  double V_max[3];  ///< Координаты максимальной вершины
} Obj_data;

/// @brief Инициализация новой структуры для 3D-модели нулевыми значениями
/// @param model указатель на пустую структуру
void init_data(Obj_data *model);

/// @brief Очистка и удаление структуры с 3D-моделью
/// @param model указатель на структуру c 3D-моделью
void delete_data(Obj_data *model);

/// @brief Парсер obj-файла
/// @param model указатель на структуру c 3D-моделью
/// @param file_name строка с именем файла
/// @return код ошибки (0 - Ok)
int read_obj_file(Obj_data *model, char *file_name);

/// @brief Подсчет количества вершин и полигонов в obj-файле. Если количество
/// вершин (v) или полигонов (f) окажется равно 0, возвращает ошибку.
/// @param model указатель на структуру c 3D-моделью
/// @param file указатель на файловую переменную
/// @return код ошибки (0 - Ok)
int count_vf(Obj_data *model, FILE *file);

/// @brief Заполняет массивы с вершинами и полигонами
/// @param model указатель на структуру c 3D-моделью
/// @param file указатель на файловую переменную
/// @return код ошибки (0 - Ok)
int add_points(Obj_data *model, FILE *file);

/// @brief Поиск минимальных и максимальных координат вершин
/// @param model указатель на структуру c 3D-моделью
void find_min_max(Obj_data *model);

/// @brief Подсчет и проверка количества вершин в f-строке (3 <= N <= num_V)
/// @param line f-строка со списком вершин в полигоне
/// @param model указатель на структуру c 3D-моделью
/// @param countF порядковый номер полигона в массиве полигонов в 3D-модели
/// @return код ошибки (0 - Ok)
int count_v_in_polygon(char *line, Obj_data *model, int countF);

/// @brief Заполнение массива со списком вершин полигона (номер вершины должен
/// быть не больше num_V - 1)
/// @param line f-строка со списком вершин в полигоне
/// @param model указатель на структуру c 3D-моделью
/// @param countF порядковый номер полигона в массиве полигонов в 3D-модели
/// @return код ошибки (0 - Ok)
int add_polygon(char *line, Obj_data *model, int countF);

/// @brief Приведение всех координат вершин к диапазону [-1; 1]
/// @param model указатель на структуру c 3D-моделью
void normalize(Obj_data *model);

/// @brief Центрирует модель вокруг точки (0,0,0)
/// @param model указатель на структуру c 3D-моделью
void centering(Obj_data *model);

/// @brief Перемещение модели по оси X
/// @param model указатель на структуру c 3D-моделью
/// @param dX смещение по оси Х
void move_x(Obj_data *model, double dX);

/// @brief Перемещение модели по оси Y
/// @param model указатель на структуру c 3D-моделью
/// @param dY смещение по оси Y
void move_y(Obj_data *model, double dY);

/// @brief Перемещение модели по оси Z
/// @param model указатель на структуру c 3D-моделью
/// @param dZ смещение по оси Z
void move_z(Obj_data *model, double dZ);

/// @brief Вращение модели вокруг оси Х
/// @param model указатель на структуру c 3D-моделью
/// @param angle_deg угол поворота вокруг оси Х (в градусах)
void rotate_x(Obj_data *model, double angle_deg);

/// @brief Вращение модели вокруг оси Y
/// @param model указатель на структуру c 3D-моделью
/// @param angle_deg угол поворота вокруг оси Y (в градусах)
void rotate_y(Obj_data *model, double angle_deg);

/// @brief Вращение модели вокруг оси Z
/// @param model указатель на структуру c 3D-моделью
/// @param angle_deg угол поворота вокруг оси Z (в градусах)
void rotate_z(Obj_data *model, double angle_deg);

/// @brief Увеличение / уменьшение модели
/// @param model указатель на структуру c 3D-моделью
/// @param coeff коэффициент масштабирования
void scale(Obj_data *model, double coeff);

#endif  // SRC_3D_VIEWER_V1_0_H
